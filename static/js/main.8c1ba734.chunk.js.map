{"version":3,"sources":["styles/MainStyles.js","components/TopBar.jsx","components/SideBar.jsx","utils/numberUtils.js","styles/TileStyles.js","components/metrics/UptimeComponent.jsx","utils/chartUtils.js","components/metrics/ThroughputChart.jsx","components/metrics/ThroughputComponent.jsx","components/metrics/MainMetricsChart.jsx","components/metrics/OutlinedSelectComponent.jsx","components/metrics/MainMetricsFilterPanel.jsx","components/metrics/MainMetricsComponent.jsx","components/metrics/MetricsComponentView.jsx","components/metrics/MetricsComponentContainer.jsx","screens/MetricsScreen.jsx","components/logs/LogsTableToolbar.jsx","components/logs/LogsTableHead.jsx","components/logs/LogsFilterDialog.jsx","components/logs/LogsComponentView.jsx","components/logs/LogsComponentContainer.jsx","screens/LogsScreen.jsx","screens/ErrorsScreen.jsx","screens/SettingsScreen.jsx","screens/AdminScreen.jsx","routes/MainNavigation.jsx","App.jsx","serviceWorker.js","index.js"],"names":["useMainStyle","makeStyles","theme","root","display","appBar","zIndex","drawer","menuButton","marginRight","spacing","breakpoints","up","width","flexShrink","drawerPaper","content","flexGrow","padding","toolbar","mixins","TopBar","props","classes","useTheme","isSmallDevice","useMediaQuery","down","AppBar","position","className","Toolbar","IconButton","color","aria-label","edge","onClick","onDrawerToggle","Typography","variant","noWrap","ListItemLink","icon","name","to","renderLink","React","useMemo","forwardRef","itemProps","ref","ListItem","button","component","onItemClicked","ListItemIcon","ListItemText","primary","SideBar","drawerContent","List","menuItems","map","item","index","key","onMobileDrawerClose","Divider","ExitToApp","Drawer","onClose","open","isMobileDrawerOpen","paper","ModalProps","keepMounted","Speed","History","BugReport","Settings","SupervisorAccount","round","value","decimalPlaces","parseFloat","toFixed","randomInRange","min","max","Math","random","useTileStyle","card","marginTop","cardTitle","fontSize","sectionTitle","row","flexDirection","appendix","marginLeft","UptimeComponent","uptime","errorRate","serverErrors","roundUptime","roundErrorRate","roundServerErrors","last24h","calculateTimePeriodInLast24hr","Card","CardContent","gutterBottom","CardActions","Button","size","totalSeconds","hours","floor","minutes","seconds","formatTime","generateRandomData","time","moment","startOf","data","i","add","push","timestamp","valueOf","ThroughputChart","useStyle","height","container","margin","top","right","left","bottom","id","x1","y1","x2","y2","offset","stopColor","stopOpacity","dataKey","domain","tickFormatter","unixTime","format","type","unit","formatter","labelFormatter","stroke","dot","strokeWidth","ThroughputComponent","currentValue","relativeCapacity","formatThroughput","MainMetricsChart","styles","useStyles","inputLabel","useRef","useState","labelWidth","setLabelWidth","useEffect","current","offsetWidth","items","MenuItem","FormControl","formControl","InputLabel","label","Select","labelId","onChange","selectEmpty","error","percentiles","selected","filter","v","length","checkBoxes","FormControlLabel","control","Checkbox","checked","onChangePercentile","ExpansionPanel","defaultExpanded","ExpansionPanelSummary","expandIcon","aria-controls","Grid","xs","heading","secondaryHeading","ExpansionPanelDetails","sm","utils","MomentUtils","columnContainer","DateTimePicker","inputVariant","startDate","onStartDateChange","endDate","onEndDateChange","spaceAbove","required","FormLabel","FormGroup","FormHelperText","typography","pxToRem","palette","text","secondary","verticalAlign","details","alignItems","justifyContent","helper","borderLeft","divider","link","main","textDecoration","MainMetricsComponent","metricName","setMetricName","sourceApp","setSourceApp","Date","setStartDate","setEndDate","initialPercentiles","setPercentiles","OutlinedSelectComponent","event","target","metricsMenuItems","sourceAppItems","MainMetricsFilterPanel","dateTime","console","log","newPercentiles","j","changed","MetricsComponentView","isLargeScreen","largeScreenLayout","md","throughputMetrics","smallScreenLayout","MetricsComponentContainer","defaultThroughputMetrics","MetricsScreen","useToolbarStyles","numSelected","clsx","highlight","title","Tooltip","openFilterDialog","paddingLeft","paddingRight","backgroundColor","lighten","light","dark","flex","order","onSelectAllClick","orderBy","onRequestSort","rowCount","TableHead","TableRow","TableCell","align","Info","headCells","headCell","disablePadding","sortDirection","TableSortLabel","active","direction","property","visuallyHidden","numeric","Dialog","aria-labelledby","DialogTitle","DialogContent","newDate","DialogActions","onApply","rowContainer","setOrder","setOrderBy","page","setPage","dense","setDense","rowsPerPage","setRowsPerPage","isFilterDialogOpen","setIsFilterDialogOpen","emptyRows","logs","Paper","LogsTableToolbar","LogsFilterDialog","filters","Table","table","LogsTableHead","TableBody","array","cmp","stabilizedThis","el","sort","a","b","stableSort","desc","getSorting","slice","isItemSelected","indexOf","hover","role","aria-checked","tabIndex","statusCode","Error","CheckCircle","style","green","scope","appName","requestPath","method","requestTimestamp","requestDuration","colSpan","TablePagination","rowsPerPageOptions","count","onChangePage","newPage","onChangeRowsPerPage","parseInt","Switch","marginBottom","minWidth","border","clip","overflow","generateRandomLogs","LogsComponentView","apps","methods","statusCodes","getRandomItem","paths","randomLogs","LogsScreen","LogsComponentContainer","ErrorsScreen","AdminScreen","MainNavigation","path","App","setIsMobileDrawerOpen","CssBaseline","isDrawerOpen","basename","process","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.8c1ba734.chunk.js","sourcesContent":["import {makeStyles} from \"@material-ui/core/styles\";\n\nconst drawerWidth = 240;\n\nconst useMainStyle = makeStyles(theme => ({\n    root: {\n        display: 'flex',\n    },\n    appBar: {\n        zIndex: theme.zIndex.drawer + 1,\n    },\n    menuButton: {\n        marginRight: theme.spacing(2),\n        [theme.breakpoints.up('sm')]: {\n            display: 'none',\n        },\n    },\n\n\n    drawer: {\n        width: drawerWidth,\n        flexShrink: 0,\n    },\n    drawerPaper: {\n        width: drawerWidth,\n    },\n    content: {\n        flexGrow: 1,\n        padding: theme.spacing(3),\n    },\n    toolbar: theme.mixins.toolbar,\n}));\n\nexport default useMainStyle;\n","import React from 'react';\n\nimport AppBar from '@material-ui/core/AppBar';\nimport Toolbar from '@material-ui/core/Toolbar';\nimport Typography from '@material-ui/core/Typography';\nimport useMainStyle from \"../styles/MainStyles\";\nimport IconButton from \"@material-ui/core/IconButton\";\nimport MenuIcon from '@material-ui/icons/Menu';\nimport {useMediaQuery, useTheme} from \"@material-ui/core\";\n\nexport default function TopBar(props) {\n    const classes = useMainStyle();\n\n    const theme = useTheme();\n    const isSmallDevice = useMediaQuery(theme.breakpoints.down('md'));\n\n    return (\n        <AppBar position=\"fixed\" className={classes.appBar}>\n            <Toolbar>\n                {isSmallDevice && <IconButton\n                    color=\"inherit\"\n                    aria-label=\"open drawer\"\n                    edge=\"start\"\n                    onClick={props.onDrawerToggle}\n                    className={classes.menuButton}\n                >\n                    <MenuIcon />\n                </IconButton>}\n                <Typography variant=\"h6\" noWrap>\n                    Logs Panda\n                </Typography>\n            </Toolbar>\n        </AppBar>\n    );\n}\n\n\n\n","import React from 'react';\nimport Drawer from \"@material-ui/core/Drawer\";\nimport ListItemIcon from \"@material-ui/core/ListItemIcon\";\nimport Divider from \"@material-ui/core/Divider\";\nimport List from \"@material-ui/core/List\";\nimport ListItem from \"@material-ui/core/ListItem\";\nimport ListItemText from \"@material-ui/core/ListItemText\";\n\nimport useMainStyle from \"../styles/MainStyles\";\nimport {BugReport, History, Settings, Speed, SupervisorAccount, ExitToApp} from \"@material-ui/icons\";\nimport {Link} from \"react-router-dom\";\nimport {useMediaQuery, useTheme} from \"@material-ui/core\";\n\n\nfunction ListItemLink(props) {\n    const {icon, name, to} = props;\n    const renderLink = React.useMemo(\n        () =>\n            React.forwardRef((itemProps, ref) => (\n                <Link to={to} {...itemProps} ref={ref}/>\n            )),\n        [to],\n    );\n\n    return (\n        <li>\n            <ListItem button component={renderLink} onClick={props.onItemClicked}>\n                {icon ? <ListItemIcon>{icon}</ListItemIcon> : null}\n                <ListItemText primary={name}/>\n            </ListItem>\n        </li>\n    );\n}\n\nexport default function SideBar(props) {\n    const classes = useMainStyle();\n    const theme = useTheme();\n    const isSmallDevice = useMediaQuery(theme.breakpoints.down('md'));\n\n    const drawerContent = (\n        <div>\n            <List>\n                {\n                    menuItems.map((item, index) => {\n                        return <ListItemLink {...item}\n                                             key={index}\n                                             onItemClicked={props.onMobileDrawerClose}\n                        />\n                    })\n                }\n            </List>\n            <Divider/>\n\n            <ListItem button key={'Sign Out'}>\n                <ListItemIcon><ExitToApp/></ListItemIcon>\n                <ListItemText primary={'Sign Out'}/>\n            </ListItem>\n        </div>\n    );\n\n    if (isSmallDevice) {\n        return (\n            <Drawer\n                // container={container}\n                variant=\"temporary\"\n                // anchor={theme.direction === 'rtl' ? 'right' : 'left'}\n                onClose={props.onMobileDrawerClose}\n                open={props.isMobileDrawerOpen}\n                classes={{\n                    paper: classes.drawerPaper,\n                }}\n                ModalProps={{\n                    keepMounted: true, // Better open performance on mobile.\n                }}\n            >\n                {drawerContent}\n            </Drawer>\n        )\n    } else {\n        return (\n            <Drawer\n                className={classes.drawer}\n                variant=\"permanent\"\n                classes={{\n                    paper: classes.drawerPaper,\n                }}\n            >\n                <div className={classes.toolbar}/>\n                {drawerContent}\n            </Drawer>\n        );\n    }\n\n}\n\n\nconst menuItems = [\n    {\n        \"name\": \"Metrics\",\n        \"icon\": <Speed/>,\n        \"to\": \"/metrics\"\n    },\n    {\n        \"name\": \"Logs\",\n        \"icon\": <History/>,\n        \"to\": \"/logs\"\n    },\n    {\n        \"name\": \"Error Reports\",\n        \"icon\": <BugReport/>,\n        \"to\": \"/errors\"\n    },\n    {\n        \"name\": \"Settings\",\n        \"icon\": <Settings/>,\n        \"to\": \"/settings\"\n    },\n    {\n        \"name\": \"Administration\",\n        \"icon\": <SupervisorAccount/>,\n        \"to\": \"/admin\"\n    },\n];\n","\n\nexport function round(value, decimalPlaces= 2) {\n    return parseFloat(value).toFixed(decimalPlaces);\n}\n\n\nexport function randomInRange(min, max) {\n    return Math.random() * (+max - +min) + +min;\n}\n","import {makeStyles} from \"@material-ui/core/styles\";\n\nconst useTileStyle = makeStyles(theme => ({\n    root: {\n        flexGrow: 1,\n    },\n    card: {\n        marginTop: 24,\n        padding: theme.spacing(2),\n    },\n    cardTitle: {\n        fontSize: 18,\n    },\n    sectionTitle: {\n        marginTop: 12,\n    },\n    row: {\n        display: 'flex',\n        flexDirection: 'row',\n    },\n    appendix: {\n        marginLeft: 10\n    }\n}));\n\n\nexport default useTileStyle;\n","import React from \"react\";\nimport Card from \"@material-ui/core/Card\";\nimport CardActions from '@material-ui/core/CardActions';\nimport CardContent from '@material-ui/core/CardContent';\nimport Button from '@material-ui/core/Button';\nimport Typography from '@material-ui/core/Typography';\nimport {round} from \"../../utils/numberUtils\";\nimport useTileStyle from \"../../styles/TileStyles\";\n\n\n\nexport default function UptimeComponent(props) {\n    const classes = useTileStyle();\n\n    const {uptime, errorRate, serverErrors} = props;\n    const roundUptime = round(uptime, 2);\n    const roundErrorRate = round(errorRate, 2);\n    const roundServerErrors = round(serverErrors, 2);\n\n    const last24h = calculateTimePeriodInLast24hr(uptime);\n\n    return(\n        <Card className={classes.card}>\n            <CardContent>\n                <Typography className={classes.cardTitle} color=\"textSecondary\" gutterBottom>\n                    Uptime\n                </Typography>\n                <Typography variant=\"h5\" component=\"h2\">\n                    {roundUptime}%\n                </Typography>\n\n\n                <Typography color=\"textSecondary\">\n                    {last24h} during last 24h\n                </Typography>\n\n\n                <Typography className={classes.sectionTitle} color=\"textSecondary\">\n                    Error rate\n                </Typography>\n                <Typography variant=\"h5\" component=\"h2\">\n                    {roundErrorRate}%\n                </Typography>\n\n\n\n                <Typography className={classes.sectionTitle} color=\"textSecondary\">\n                    of which\n                </Typography>\n                <Typography variant=\"h5\" component=\"h2\">\n                    {roundServerErrors}%\n                </Typography>\n                <Typography color=\"textSecondary\">\n                    were server side errors\n                </Typography>\n\n            </CardContent>\n            <CardActions>\n                <Button size=\"small\">Learn More</Button>\n            </CardActions>\n        </Card>\n    )\n}\n\nconst calculateTimePeriodInLast24hr = (uptime) => {\n    let totalSeconds = 24 * 60 * 60 * (100 - uptime) / 100;\n\n    let hours   = Math.floor(totalSeconds / 3600);\n    let minutes = Math.floor((totalSeconds - (hours * 3600)) / 60);\n    let seconds = round(totalSeconds - (hours * 3600) - (minutes * 60), 0);\n\n    hours = formatTime(hours, 'h');\n    minutes = formatTime(minutes, 'min');\n    seconds = formatTime(seconds, 's');\n\n    return hours + ' ' + minutes + ' ' + seconds;\n};\n\nconst formatTime = (value, appendix) => ((value || '') && (value + appendix));\n\n","import moment from \"moment\";\nimport {randomInRange} from \"./numberUtils\";\n\n\nexport function generateRandomData() {\n    const time = moment().startOf('date');\n    const data = [];\n    for (let i = 0; i < 23; i++) {\n        time.add(1, 'h');\n        let value = randomInRange(20, 80);\n\n        data.push({\n            timestamp: time.valueOf(),\n            value: value\n        })\n    }\n\n    return data;\n}\n","import React from \"react\";\nimport {CartesianGrid, Line, LineChart, ResponsiveContainer, Tooltip, XAxis, YAxis} from \"recharts\";\nimport moment from \"moment\";\nimport {makeStyles} from \"@material-ui/core/styles\";\nimport {round} from \"../../utils/numberUtils\";\nimport {generateRandomData} from \"../../utils/chartUtils\";\n\n\nexport default function ThroughputChart() {\n\n    const classes = useStyle();\n\n    const data = generateRandomData();\n\n    const tooltipFormatter = (value) => {\n        return [round(value, 1) + '%', \"Capacity\"]\n    };\n\n    const tooltipLabelFormatter = (timestamp) => moment(timestamp).format('HH:mm');\n\n    return (\n        <ResponsiveContainer width={300} height={200} className={classes.container}>\n            <LineChart\n                data={data}\n                margin={{top: 5, right: 0, left: 0, bottom: 5}}\n            >\n                <defs>\n                    <linearGradient id=\"color\" x1=\"0\" y1=\"0\" x2=\"0\" y2=\"1\">\n                        <stop offset=\"5%\" stopColor=\"#ff0000\" stopOpacity={0.8}/>\n                        <stop offset=\"95%\" stopColor=\"#00ff00\" stopOpacity={0.3}/>\n                    </linearGradient>\n                </defs>\n\n                <XAxis dataKey='timestamp'\n                       domain={['dataMin', 'dataMax']}\n                       name='Time'\n                       tickFormatter={(unixTime) => moment(unixTime).format('HH:mm')}\n                       type='number'/>\n                <YAxis domain={[0, 100]} name={'Capacity'} unit={'%'}/>\n                <Tooltip\n                    formatter={tooltipFormatter}\n                    labelFormatter={tooltipLabelFormatter}\n                />\n                <CartesianGrid stroke=\"#f5f5f5\"/>\n                <Line type=\"monotone\" dataKey=\"value\" stroke=\"url(#color)\" dot={false} strokeWidth={3}/>\n            </LineChart>\n        </ResponsiveContainer>)\n}\n\nconst useStyle = makeStyles(() => ({\n    container: {\n        marginTop: 20,\n    },\n}));\n","import React from \"react\";\nimport useTileStyle from \"../../styles/TileStyles\";\nimport Card from \"@material-ui/core/Card\";\nimport CardContent from \"@material-ui/core/CardContent\";\nimport Typography from \"@material-ui/core/Typography\";\nimport CardActions from \"@material-ui/core/CardActions\";\nimport Button from \"@material-ui/core/Button\";\nimport {round} from \"../../utils/numberUtils\";\nimport ThroughputChart from \"./ThroughputChart\";\n\n\n\nexport default function ThroughputComponent(props) {\n    const classes = useTileStyle();\n    const {currentValue, relativeCapacity} = props;\n\n    return(\n        <Card className={classes.card}>\n            <CardContent>\n                <Typography className={classes.cardTitle} color=\"textSecondary\" gutterBottom>\n                    Current throughput\n                </Typography>\n\n                <div className={classes.row}>\n                    <Typography variant=\"h5\" component=\"h2\">\n                        {formatThroughput(currentValue)}\n                    </Typography>\n                    <Typography variant=\"h5\" component=\"h2\" className={classes.appendix} color=\"textSecondary\">\n                        {\"RPM\"}\n                    </Typography>\n                </div>\n\n                <Typography className={classes.sectionTitle} color=\"textSecondary\">\n                    Relative\n                </Typography>\n\n                <div className={classes.row}>\n                    <Typography variant=\"h5\" component=\"h2\">\n                        {round(relativeCapacity, 1)}%\n                    </Typography>\n                    <Typography variant=\"h5\" component=\"h2\" className={classes.appendix} color=\"textSecondary\">\n                        {\"capacity\"}\n                    </Typography>\n                </div>\n\n\n                <ThroughputChart/>\n\n            </CardContent>\n            <CardActions>\n                <Button size=\"small\">Learn More</Button>\n            </CardActions>\n        </Card>\n    )\n\n}\n\n\nconst formatThroughput = (value) => {\n    if (value < 5000) {\n        return value\n    } else if(value < 20000) {\n        const thousands = value / 1000;\n        return round(thousands, 2) + 'k'\n    } else if(value < 1000000) {\n        const thousands = value / 1000;\n        return round(thousands, 1) + 'k'\n    } else {\n        const millions = value / 1000000;\n        return round(millions, 3) + 'M'\n    }\n};\n","import React from \"react\";\nimport {CartesianGrid, Line, LineChart, ResponsiveContainer, Tooltip, XAxis, YAxis} from \"recharts\";\nimport moment from \"moment\";\nimport {makeStyles} from \"@material-ui/core/styles\";\nimport {round} from \"../../utils/numberUtils\";\nimport {generateRandomData} from \"../../utils/chartUtils\";\n\n\nexport default function MainMetricsChart() {\n\n    const classes = useStyle();\n\n    const data = generateRandomData();\n\n    const tooltipFormatter = (value) => {\n        return [round(value, 1) + '%', \"Capacity\"]\n    };\n\n    const tooltipLabelFormatter = (timestamp) => moment(timestamp).format('HH:mm');\n\n    return (\n        <ResponsiveContainer width={'90%'} height={500} className={classes.container}>\n            <LineChart\n                data={data}\n                margin={{top: 5, right: 0, left: 0, bottom: 5}}\n            >\n                <defs>\n                    <linearGradient id=\"color\" x1=\"0\" y1=\"0\" x2=\"0\" y2=\"1\">\n                        <stop offset=\"5%\" stopColor=\"#ff0000\" stopOpacity={0.8}/>\n                        <stop offset=\"95%\" stopColor=\"#00ff00\" stopOpacity={0.3}/>\n                    </linearGradient>\n                </defs>\n\n                <XAxis dataKey='timestamp'\n                       domain={['dataMin', 'dataMax']}\n                       name='Time'\n                       tickFormatter={(unixTime) => moment(unixTime).format('HH:mm')}\n                       type='number'/>\n                <YAxis domain={[0, 100]} name={'Capacity'} unit={'%'}/>\n                <Tooltip\n                    formatter={tooltipFormatter}\n                    labelFormatter={tooltipLabelFormatter}\n                />\n                <CartesianGrid stroke=\"#f5f5f5\"/>\n                <Line type=\"monotone\" dataKey=\"value\" stroke=\"url(#color)\" dot={false} strokeWidth={3}/>\n            </LineChart>\n        </ResponsiveContainer>)\n}\n\nconst useStyle = makeStyles(() => ({\n    container: {\n        marginTop: 20,\n    },\n}));\n\n\n\n","import React from \"react\";\nimport FormControl from \"@material-ui/core/FormControl\";\nimport InputLabel from \"@material-ui/core/InputLabel\";\nimport Select from \"@material-ui/core/Select\";\nimport MenuItem from \"@material-ui/core/MenuItem\";\nimport {makeStyles} from \"@material-ui/core\";\n\nexport default function (props) {\n    const styles = useStyles();\n\n    const inputLabel = React.useRef(null);\n    const [labelWidth, setLabelWidth] = React.useState(0);\n    React.useEffect(() => {\n        setLabelWidth(inputLabel.current.offsetWidth);\n    }, []);\n\n    const menuItems = props.items.map((item, index) => (\n        <MenuItem key={index} value={item.value}>{item.name}</MenuItem>\n    ));\n\n    return (\n        <FormControl variant=\"outlined\" className={styles.formControl}>\n            <InputLabel ref={inputLabel} id=\"demo-simple-select-outlined-label\">\n                {props.label}\n            </InputLabel>\n            <Select\n                labelId=\"demo-simple-select-outlined-label\"\n                id=\"demo-simple-select-outlined\"\n                value={props.value}\n                onChange={props.onChange}\n                labelWidth={labelWidth}\n            >\n                {menuItems}\n            </Select>\n        </FormControl>\n    )\n}\n\nconst useStyles = makeStyles(theme => ({\n    formControl: {\n        margin: theme.spacing(1),\n        width: '100%'\n    },\n    selectEmpty: {\n        marginTop: theme.spacing(2),\n    },\n}));\n","import React from \"react\";\n\nimport {makeStyles} from '@material-ui/core/styles';\nimport ExpansionPanel from '@material-ui/core/ExpansionPanel';\nimport ExpansionPanelDetails from '@material-ui/core/ExpansionPanelDetails';\nimport ExpansionPanelSummary from '@material-ui/core/ExpansionPanelSummary';\nimport Typography from '@material-ui/core/Typography';\nimport ExpandMoreIcon from '@material-ui/icons/ExpandMore';\nimport {DateTimePicker, MuiPickersUtilsProvider} from \"@material-ui/pickers\";\nimport MomentUtils from \"@date-io/moment\";\nimport FormControl from \"@material-ui/core/FormControl\";\nimport FormLabel from \"@material-ui/core/FormLabel\";\nimport FormGroup from \"@material-ui/core/FormGroup\";\nimport FormControlLabel from \"@material-ui/core/FormControlLabel\";\nimport Checkbox from \"@material-ui/core/Checkbox\";\nimport FormHelperText from \"@material-ui/core/FormHelperText\";\nimport Grid from \"@material-ui/core/Grid\";\nimport Card from \"@material-ui/core/Card\";\n\nexport default function (props) {\n\n    const classes = useStyles();\n\n    const error = props.percentiles.map(item => item.selected).filter(v => v).length < 1;\n\n    const checkBoxes = props.percentiles.map((item, index) => (<FormControlLabel key={index}\n                                                                                 control={<Checkbox\n                                                                                     checked={item.selected}\n                                                                                     onChange={() => props.onChangePercentile(index)}\n                                                                                     value={item.selected}\n                                                                                     color=\"primary\"\n                                                                                 />}\n                                                                                 label={item.label}\n    />));\n\n\n    return (\n        <div className={classes.root}>\n            <ExpansionPanel defaultExpanded>\n                <ExpansionPanelSummary\n                    expandIcon={<ExpandMoreIcon/>}\n                    aria-controls=\"panel1c-content\"\n                    id=\"panel1c-header\"\n                >\n\n                    <Grid container>\n                        <Grid item xs={6}>\n                            <Typography className={classes.heading}>Filters</Typography>\n                        </Grid>\n                        <Grid item xs={6}>\n                            <Typography className={classes.secondaryHeading}>Narrow down your results</Typography>\n                        </Grid>\n                    </Grid>\n\n                </ExpansionPanelSummary>\n                <ExpansionPanelDetails>\n\n                    <Grid container spacing={3}>\n                        <Grid item xs={12} sm={6}>\n                            <MuiPickersUtilsProvider utils={MomentUtils}>\n                                <div className={classes.columnContainer}>\n\n                                    <DateTimePicker label=\"Start Date\"\n                                                    inputVariant=\"outlined\"\n                                                    value={props.startDate}\n                                                    onChange={props.onStartDateChange}\n                                    />\n\n                                    <DateTimePicker label=\"End Date\"\n                                                    inputVariant=\"outlined\"\n                                                    value={props.endDate}\n                                                    onChange={props.onEndDateChange}\n                                                    className={classes.spaceAbove}\n                                    />\n                                </div>\n                            </MuiPickersUtilsProvider>\n\n                        </Grid>\n                        <Grid item xs={12} sm={6}>\n                            <FormControl required error={error} component=\"fieldset\" className={classes.formControl}>\n                                <FormLabel component=\"legend\">Charts to display</FormLabel>\n                                <FormGroup>\n                                    {checkBoxes}\n                                </FormGroup>\n                                <FormHelperText>You need to select at least one</FormHelperText>\n                            </FormControl>\n                        </Grid>\n                    </Grid>\n                </ExpansionPanelDetails>\n            </ExpansionPanel>\n        </div>\n    );\n}\n\n\nconst useStyles = makeStyles(theme => ({\n    root: {\n        width: '100%',\n    },\n    heading: {\n        fontSize: theme.typography.pxToRem(15),\n    },\n    secondaryHeading: {\n        fontSize: theme.typography.pxToRem(15),\n        color: theme.palette.text.secondary,\n    },\n    icon: {\n        verticalAlign: 'bottom',\n        height: 20,\n        width: 20,\n    },\n    details: {\n        alignItems: 'center',\n    },\n    spaceAbove: {\n        marginTop: 30\n    },\n    columnContainer: {\n        display: 'flex',\n        flexDirection: 'column',\n        justifyContent: 'space-around',\n        alignItems: 'space-around'\n    },\n    helper: {\n        borderLeft: `2px solid ${theme.palette.divider}`,\n        padding: theme.spacing(1, 2),\n    },\n    link: {\n        color: theme.palette.primary.main,\n        textDecoration: 'none',\n        '&:hover': {\n            textDecoration: 'underline',\n        },\n    }\n}));\n","import React, {useState} from \"react\";\nimport useTileStyle from \"../../styles/TileStyles\";\nimport MainMetricsChart from \"./MainMetricsChart\";\nimport Grid from '@material-ui/core/Grid';\nimport OutlinedSelectComponent from \"./OutlinedSelectComponent\";\nimport MainMetricsFilterPanel from \"./MainMetricsFilterPanel\";\nimport Button from \"@material-ui/core/Button\";\nimport CardActions from \"@material-ui/core/CardActions\";\nimport Card from \"@material-ui/core/Card\";\n\nexport default function MainMetricsComponent(props) {\n    const classes = useTileStyle();\n\n    const [metricName, setMetricName] = useState('');\n    const [sourceApp, setSourceApp] = useState('');\n\n    const [startDate, setStartDate] = useState(new Date());\n    const [endDate, setEndDate] = useState(new Date());\n\n    const [percentiles, setPercentiles] = useState(initialPercentiles);\n\n\n    const handleChangePercentile = index => {\n\n        console.log('index', index);\n\n        const newPercentiles = percentiles.map((item, j) => {\n            if (j === index) {\n                const changed = {...item};\n                changed.selected = !item.selected;\n                return changed\n            } else {\n                return item\n            }\n        });\n        setPercentiles(newPercentiles)\n    };\n\n\n    return (\n        <Card className={classes.card}>\n            <MainMetricsChart/>\n\n            <Grid container spacing={3}>\n                <Grid item xs={6}>\n\n                    <OutlinedSelectComponent label={'Metric name'}\n                                             value={metricName}\n                                             onChange={(event) => setMetricName(event.target.value)}\n                                             items={metricsMenuItems}\n\n                    />\n                </Grid>\n                <Grid item xs={6}>\n                    <OutlinedSelectComponent label={'Source App'}\n                                             value={sourceApp}\n                                             onChange={(event) => setSourceApp(event.target.value)}\n                                             items={sourceAppItems}\n\n                    />\n                </Grid>\n\n                <Grid item xs={12}>\n                    <MainMetricsFilterPanel\n                        startDate={startDate}\n                        endDate={endDate}\n                        onStartDateChange={dateTime => setStartDate(dateTime)}\n                        onEndDateChange={dateTime => setEndDate(dateTime)}\n                        percentiles={percentiles}\n                        onChangePercentile={handleChangePercentile}\n\n                    />\n                </Grid>\n            </Grid>\n\n            <CardActions>\n                <Button size=\"small\">Cancel</Button>\n                <Button size=\"small\" color=\"primary\">Apply</Button>\n            </CardActions>\n\n\n\n        </Card>\n    )\n}\n\nconst sourceAppItems = [\n    {\n        name: \"User Management App\",\n        value: 'user-management-app'\n    },\n    {\n        name: \"Authorization Service\",\n        value: 'auth-service'\n    },\n    {\n        name: \"Video Streaming Service\",\n        value: 'video-streaming-service'\n    },\n];\n\nconst metricsMenuItems = [\n    {\n        name: \"Uptime\",\n        value: 'uptime'\n    },\n    {\n        name: \"Throughput\",\n        value: 'throughput'\n    },\n    {\n        name: \"Latency\",\n        value: 'latency'\n    },\n    {\n        name: \"Error rate\",\n        value: 'errors'\n    },\n];\n\n\nconst initialPercentiles = [\n    {\n        label: 'Average',\n        value: 50,\n        selected: true\n    },\n    {\n        label: '90%',\n        value: 90,\n        selected: true\n    },\n    {\n        label: '95%',\n        value: 95,\n        selected: true\n    },\n    {\n        label: '99%',\n        value: 99,\n        selected: false\n    }\n\n];\n\n","import React from \"react\";\nimport UptimeComponent from \"./UptimeComponent\";\nimport ThroughputComponent from \"./ThroughputComponent\";\nimport MainMetricsComponent from \"./MainMetricsComponent\";\nimport useTileStyle from \"../../styles/TileStyles\";\nimport Grid from \"@material-ui/core/Grid\";\nimport {useMediaQuery, useTheme} from \"@material-ui/core\";\n\nexport default function MetricsComponentView(props) {\n\n    const classes = useTileStyle();\n    const theme = useTheme();\n    const isLargeScreen = useMediaQuery(theme.breakpoints.up('lg'));\n\n    const largeScreenLayout = (\n        <Grid container spacing={3}>\n\n            <Grid item xs={12} md={8}>\n                <MainMetricsComponent/>\n            </Grid>\n            <Grid item xs={12} md={4}>\n                <UptimeComponent {...props}/>\n                <ThroughputComponent {...props.throughputMetrics}/>\n            </Grid>\n        </Grid>\n    );\n\n    const smallScreenLayout = (\n        <Grid container spacing={3}>\n\n            <Grid item xs={12} md={6}>\n                <UptimeComponent {...props}/>\n            </Grid>\n            <Grid item xs={12} md={6}>\n                <ThroughputComponent {...props.throughputMetrics}/>\n            </Grid>\n            <Grid item xs={12}>\n                <MainMetricsComponent/>\n            </Grid>\n\n        </Grid>\n    )\n\n\n    return(\n        <div className={classes.root}>\n            {isLargeScreen ? largeScreenLayout : smallScreenLayout}\n        </div>\n    )\n\n\n}\n\n\n","import React, {useState} from \"react\";\nimport MetricsComponentView from \"./MetricsComponentView\";\n\nexport default function MetricsComponentContainer() {\n\n    const [uptime, setUptime] = useState(98.97);\n    const [errorRate, setErrorRate] = useState(0.12);\n    const [serverErrors, setServerErrors] = useState(30.2);\n    const [throughputMetrics, setThroughputMetrics] = useState(defaultThroughputMetrics);\n\n    return (\n        <MetricsComponentView uptime={uptime}\n                              errorRate={errorRate}\n                              serverErrors={serverErrors}\n                              throughputMetrics={throughputMetrics}\n        />\n    )\n\n}\n\nconst defaultThroughputMetrics = {\n    currentValue: 175945,\n    relativeCapacity: 47.7\n};\n","import React from \"react\";\nimport MetricsComponentContainer from '../components/metrics/MetricsComponentContainer'\n\nexport default function MetricsScreen() {\n\n    return (<MetricsComponentContainer/>)\n}\n","import Toolbar from \"@material-ui/core/Toolbar\";\nimport clsx from \"clsx\";\nimport Typography from \"@material-ui/core/Typography\";\nimport Tooltip from \"@material-ui/core/Tooltip\";\nimport IconButton from \"@material-ui/core/IconButton\";\nimport DeleteIcon from \"@material-ui/icons/Delete\";\nimport FilterListIcon from \"@material-ui/icons/FilterList\";\nimport React from \"react\";\nimport {lighten, makeStyles} from \"@material-ui/core/styles\";\n\n\nexport default function (props) {\n    const classes = useToolbarStyles();\n    const {numSelected} = props;\n\n    return (\n        <Toolbar\n            className={clsx(classes.root, {\n                [classes.highlight]: numSelected > 0,\n            })}\n        >\n            {numSelected > 0 ? (\n                <Typography className={classes.title} color=\"inherit\" variant=\"subtitle1\">\n                    {numSelected} selected\n                </Typography>\n            ) : (\n                <Typography className={classes.title} variant=\"h6\" id=\"tableTitle\">\n                    Application Logs\n                </Typography>\n            )}\n\n            {numSelected > 0 ? (\n                <Tooltip title=\"Delete\">\n                    <IconButton aria-label=\"delete\">\n                        <DeleteIcon/>\n                    </IconButton>\n                </Tooltip>\n            ) : (\n                <Tooltip title=\"Filter list\" onClick={props.openFilterDialog}>\n                    <IconButton aria-label=\"filter list\">\n                        <FilterListIcon/>\n                    </IconButton>\n                </Tooltip>\n            )}\n        </Toolbar>\n    );\n};\n\n\nconst useToolbarStyles = makeStyles(theme => ({\n    root: {\n        paddingLeft: theme.spacing(2),\n        paddingRight: theme.spacing(1),\n    },\n    highlight:\n        theme.palette.type === 'light'\n            ? {\n                color: theme.palette.secondary.main,\n                backgroundColor: lighten(theme.palette.secondary.light, 0.85),\n            }\n            : {\n                color: theme.palette.text.primary,\n                backgroundColor: theme.palette.secondary.dark,\n            },\n    title: {\n        flex: '1 1 100%',\n    },\n}));\n","import TableHead from \"@material-ui/core/TableHead\";\nimport TableRow from \"@material-ui/core/TableRow\";\nimport TableCell from \"@material-ui/core/TableCell\";\nimport Checkbox from \"@material-ui/core/Checkbox\";\nimport TableSortLabel from \"@material-ui/core/TableSortLabel\";\nimport React from \"react\";\nimport {Info} from \"@material-ui/icons\";\n\n\n\nexport default function(props) {\n    const {classes, onSelectAllClick, order, orderBy, numSelected, rowCount, onRequestSort} = props;\n    const createSortHandler = property => event => {\n        onRequestSort(event, property);\n    };\n\n    return (\n        <TableHead>\n            <TableRow>\n                <TableCell padding=\"checkbox\"\n                    // align={headCell.numeric ? 'right' : 'left'}\n                           align={'center'}\n                           // padding={headCell.disablePadding ? 'none' : 'default'}\n                           // sortDirection={orderBy === headCell.id ? order : false}\n                >\n                    <Info/>\n                    {/*<Checkbox*/}\n                    {/*    indeterminate={numSelected > 0 && numSelected < rowCount}*/}\n                    {/*    checked={numSelected === rowCount}*/}\n                    {/*    onChange={onSelectAllClick}*/}\n                    {/*    inputProps={{'aria-label': 'select all desserts'}}*/}\n                    {/*/>*/}\n                </TableCell>\n                {headCells.map(headCell => (\n                    <TableCell\n                        key={headCell.id}\n                        // align={headCell.numeric ? 'right' : 'left'}\n                        align={'left'}\n                        padding={headCell.disablePadding ? 'none' : 'default'}\n                        sortDirection={orderBy === headCell.id ? order : false}\n                    >\n                        <TableSortLabel\n                            active={orderBy === headCell.id}\n                            direction={order}\n                            onClick={createSortHandler(headCell.id)}\n                        >\n                            {headCell.label}\n                            {orderBy === headCell.id ? (\n                                <span className={classes.visuallyHidden}>\n                  {order === 'desc' ? 'sorted descending' : 'sorted ascending'}\n                </span>\n                            ) : null}\n                        </TableSortLabel>\n                    </TableCell>\n                ))}\n            </TableRow>\n        </TableHead>\n    );\n}\n\nconst headCells = [\n    {id: 'appName', numeric: false, disablePadding: true, label: 'Application Name'},\n    {id: 'requestPath', numeric: false, disablePadding: false, label: 'Requested path'},\n    {id: 'method', numeric: false, disablePadding: false, label: 'HTTP Method'},\n    {id: 'statusCode', numeric: false, disablePadding: false, label: 'HTTP Status Code'},\n    {id: 'requestTimestamp', numeric: true, disablePadding: false, label: 'Timestamp'},\n    {id: 'requestDuration', numeric: true, disablePadding: false, label: 'Request duration'},\n];\n","import React, {useState} from \"react\";\n\nimport Button from '@material-ui/core/Button';\nimport Dialog from '@material-ui/core/Dialog';\nimport DialogActions from '@material-ui/core/DialogActions';\nimport DialogContent from '@material-ui/core/DialogContent';\nimport DialogTitle from '@material-ui/core/DialogTitle';\nimport {DateTimePicker, MuiPickersUtilsProvider} from \"@material-ui/pickers\";\nimport {makeStyles} from \"@material-ui/core/styles\";\nimport MomentUtils from \"@date-io/moment\";\n\nexport default function (props) {\n    const classes = useStyles();\n\n    const [startDate, setStartDate] = useState(new Date());\n    const [endDate, setEndDate] = useState(new Date());\n\n    const buildFiltersObject = () => (\n        {startDate, endDate}\n    );\n\n    return (\n        <Dialog open={props.open} onClose={props.onClose} aria-labelledby=\"form-dialog-title\">\n            <DialogTitle id=\"form-dialog-title\">Filter Lofs</DialogTitle>\n            <DialogContent>\n\n                <MuiPickersUtilsProvider utils={MomentUtils}>\n\n                    <div className={classes.columnContainer}>\n                        <DateTimePicker label=\"Start Date\"\n                                        inputVariant=\"outlined\"\n                                        value={startDate}\n                                        onChange={newDate => {setStartDate(newDate)}}\n                        />\n\n                        <DateTimePicker label=\"End Date\"\n                                        inputVariant=\"outlined\"\n                                        value={endDate}\n                                        onChange={(newDate) => {setEndDate(newDate)}}\n                                        className={classes.spaceAbove}\n                        />\n                    </div>\n                </MuiPickersUtilsProvider>\n\n\n            </DialogContent>\n            <DialogActions>\n                <Button onClick={props.onClose} color=\"primary\">\n                    Cancel\n                </Button>\n                <Button onClick={() => props.onApply(buildFiltersObject())} color=\"primary\">\n                    Apply\n                </Button>\n            </DialogActions>\n        </Dialog>\n    )\n\n}\n\nconst useStyles = makeStyles(theme => ({\n    rowContainer: {\n        display: 'flex',\n        flexDirection: 'row',\n        justifyContent: 'space-around',\n        alignItems: 'space-around'\n    },\n}));\n","import React, {useState} from \"react\";\n\nimport {makeStyles} from '@material-ui/core/styles';\nimport Table from '@material-ui/core/Table';\nimport TableBody from '@material-ui/core/TableBody';\nimport TableCell from '@material-ui/core/TableCell';\nimport TableHead from '@material-ui/core/TableHead';\nimport TablePagination from '@material-ui/core/TablePagination';\nimport TableRow from '@material-ui/core/TableRow';\nimport TableSortLabel from '@material-ui/core/TableSortLabel';\nimport Paper from '@material-ui/core/Paper';\nimport Checkbox from '@material-ui/core/Checkbox';\nimport FormControlLabel from '@material-ui/core/FormControlLabel';\nimport Switch from '@material-ui/core/Switch';\nimport moment from \"moment\";\nimport LogsTableToolbar from \"./LogsTableToolbar\";\nimport LogsTableHead from \"./LogsTableHead\";\nimport LogsFilterDialog from \"./LogsFilterDialog\";\nimport {Error, CheckCircle} from \"@material-ui/icons\";\nimport { green } from '@material-ui/core/colors';\n\n\n\nexport default function (props) {\n    const classes = useStyles();\n    const [order, setOrder] = React.useState('asc');\n    const [orderBy, setOrderBy] = React.useState('calories');\n    const [selected, setSelected] = React.useState([]);\n    const [page, setPage] = React.useState(0);\n    const [dense, setDense] = React.useState(false);\n    const [rowsPerPage, setRowsPerPage] = React.useState(5);\n\n    const [isFilterDialogOpen, setIsFilterDialogOpen] = useState(false);\n\n    const handleRequestSort = (event, property) => {\n        const isDesc = orderBy === property && order === 'desc';\n        setOrder(isDesc ? 'asc' : 'desc');\n        setOrderBy(property);\n    };\n\n    // const handleSelectAllClick = event => {\n    //     if (event.target.checked) {\n    //         const newSelecteds = props.logs.map(n => n.name);\n    //         setSelected(newSelecteds);\n    //         return;\n    //     }\n    //     setSelected([]);\n    // };\n    //\n    // const handleClick = (event, name) => {\n    //     console.log('event', event)\n    //     console.log('name', name)\n    //\n    //     const selectedIndex = selected.indexOf(name);\n    //     let newSelected = [];\n    //\n    //     if (selectedIndex === -1) {\n    //         newSelected = newSelected.concat(selected, name);\n    //     } else if (selectedIndex === 0) {\n    //         newSelected = newSelected.concat(selected.slice(1));\n    //     } else if (selectedIndex === selected.length - 1) {\n    //         newSelected = newSelected.concat(selected.slice(0, -1));\n    //     } else if (selectedIndex > 0) {\n    //         newSelected = newSelected.concat(\n    //             selected.slice(0, selectedIndex),\n    //             selected.slice(selectedIndex + 1),\n    //         );\n    //     }\n    //\n    //     setSelected(newSelected);\n    // };\n\n    const handleChangePage = (event, newPage) => {\n        setPage(newPage);\n    };\n\n    const handleChangeRowsPerPage = event => {\n        setRowsPerPage(parseInt(event.target.value, 10));\n        setPage(0);\n    };\n\n    const handleChangeDense = event => {\n        setDense(event.target.checked);\n    };\n\n    const isSelected = name => selected.indexOf(name) !== -1;\n\n    const emptyRows = rowsPerPage - Math.min(rowsPerPage, props.logs.length - page * rowsPerPage);\n\n    const handleApplyFilters = (filters) => {\n        console.log(\"Applying filters\", filters);\n        setIsFilterDialogOpen(false)\n    };\n\n    return (\n        <div className={classes.root}>\n            <Paper className={classes.paper}>\n                <LogsTableToolbar numSelected={selected.length} openFilterDialog={() => setIsFilterDialogOpen(true)}/>\n                <LogsFilterDialog open={isFilterDialogOpen}\n                                  onApply={handleApplyFilters}\n                                  onClose={() => setIsFilterDialogOpen(false)}\n                />\n                <Table\n                    className={classes.table}\n                    aria-labelledby=\"tableTitle\"\n                    size={dense ? 'small' : 'medium'}\n                    aria-label=\"enhanced table\"\n                >\n                    <LogsTableHead\n                        classes={classes}\n                        numSelected={selected.length}\n                        order={order}\n                        orderBy={orderBy}\n                        // onSelectAllClick={handleSelectAllClick}\n                        onRequestSort={handleRequestSort}\n                        rowCount={props.logs.length}\n                    />\n                    <TableBody>\n                        {stableSort(props.logs, getSorting(order, orderBy))\n                            .slice(page * rowsPerPage, page * rowsPerPage + rowsPerPage)\n                            .map((row, index) => {\n                                const isItemSelected = isSelected(row.name);\n                                const labelId = `enhanced-table-checkbox-${index}`;\n\n                                return (\n                                    <TableRow\n                                        hover\n                                        role=\"checkbox\"\n                                        aria-checked={isItemSelected}\n                                        tabIndex={-1}\n                                        key={index}\n                                        selected={isItemSelected}\n                                    >\n                                        <TableCell padding=\"checkbox\" align={\"center\"}>\n                                            {row.statusCode >= 400 ? <Error color={\"error\"}/> : <CheckCircle style={{ color: green[500] }}/>}\n                                        </TableCell>\n                                        <TableCell component=\"th\" id={labelId} scope=\"row\" padding=\"none\">\n                                            {row.appName}\n                                        </TableCell>\n                                        <TableCell align=\"left\">{row.requestPath}</TableCell>\n                                        <TableCell align=\"left\">{row.method}</TableCell>\n                                        <TableCell align=\"left\">{row.statusCode}</TableCell>\n                                        <TableCell align=\"left\">{moment(row.requestTimestamp).format(\"D.MM.YYYY, HH:mm:ss\")}</TableCell>\n                                        <TableCell align=\"left\">{row.requestDuration}</TableCell>\n                                    </TableRow>\n                                );\n                            })}\n                        {emptyRows > 0 && (\n                            <TableRow style={{height: (dense ? 33 : 53) * emptyRows}}>\n                                <TableCell colSpan={6}/>\n                            </TableRow>\n                        )}\n                    </TableBody>\n                </Table>\n                <TablePagination\n                    rowsPerPageOptions={[5, 10, 25]}\n                    component=\"div\"\n                    count={props.logs.length}\n                    rowsPerPage={rowsPerPage}\n                    page={page}\n                    onChangePage={handleChangePage}\n                    onChangeRowsPerPage={handleChangeRowsPerPage}\n                />\n            </Paper>\n            <FormControlLabel\n                control={<Switch checked={dense} onChange={handleChangeDense}/>}\n                label=\"Dense padding\"\n            />\n        </div>\n    );\n\n}\n\n\n\n\n// EnhancedTableHead.propTypes = {\n//     classes: PropTypes.object.isRequired,\n//     numSelected: PropTypes.number.isRequired,\n//     onRequestSort: PropTypes.func.isRequired,\n//     onSelectAllClick: PropTypes.func.isRequired,\n//     order: PropTypes.oneOf(['asc', 'desc']).isRequired,\n//     orderBy: PropTypes.string.isRequired,\n//     rowCount: PropTypes.number.isRequired,\n// };\n\n\n\n\n// EnhancedTableToolbar.propTypes = {\n//     numSelected: PropTypes.number.isRequired,\n// };\n\nconst useStyles = makeStyles(theme => ({\n    root: {\n        width: '100%',\n    },\n    paper: {\n        width: '100%',\n        marginBottom: theme.spacing(2),\n    },\n    table: {\n        minWidth: 750,\n    },\n    visuallyHidden: {\n        border: 0,\n        clip: 'rect(0 0 0 0)',\n        height: 1,\n        margin: -1,\n        overflow: 'hidden',\n        padding: 0,\n        position: 'absolute',\n        top: 20,\n        width: 1,\n    },\n}));\n\n\nfunction desc(a, b, orderBy) {\n    if (b[orderBy] < a[orderBy]) {\n        return -1;\n    }\n    if (b[orderBy] > a[orderBy]) {\n        return 1;\n    }\n    return 0;\n}\n\nfunction stableSort(array, cmp) {\n    const stabilizedThis = array.map((el, index) => [el, index]);\n    stabilizedThis.sort((a, b) => {\n        const order = cmp(a[0], b[0]);\n        if (order !== 0) return order;\n        return a[1] - b[1];\n    });\n    return stabilizedThis.map(el => el[0]);\n}\n\nfunction getSorting(order, orderBy) {\n    return order === 'desc' ? (a, b) => desc(a, b, orderBy) : (a, b) => -desc(a, b, orderBy);\n}\n\n\n","import React from \"react\";\nimport LogsComponentView from \"./LogsComponentView\";\nimport {randomInRange} from \"../../utils/numberUtils\";\n\n\nexport default function () {\n\n\n    // function createData(appName, requestPath, method, statusCode, requestTimestamp, requestDuration) {\n    //     return {appName, requestPath, method, statusCode, requestTimestamp, requestDuration};\n    // }\n\n    const data = generateRandomLogs(10)\n\n    return <LogsComponentView logs={data}/>\n\n}\n\nconst apps = [\n    'User Management App',\n    'Authorization Service',\n    'Video Streaming Service'\n];\n\nconst methods = [\n    'GET',\n    'POST',\n    'UPDATE'\n];\n\nconst statusCodes = [200, 201, 302, 400, 401, 403, 404, 500];\n\nconst getRandomItem = (array) => {\n    return array[Math.floor(Math.random() * array.length)]\n};\n\nconst paths = [\n    '/',\n    '/resources',\n    '/resource/25',\n    '/auth',\n];\n\nconst generateRandomLogs = (count) => {\n    let randomLogs = [];\n    for (let i = 0; i < count; i++) {\n        randomLogs.push({\n            appName: getRandomItem(apps),\n            requestPath: getRandomItem(paths),\n            method: getRandomItem(methods),\n            statusCode: getRandomItem(statusCodes),\n            requestTimestamp: Math.round(randomInRange(1576435463000, 1576438463000)),\n            requestDuration: Math.round(randomInRange(20, 600))\n        })\n    }\n\n    return randomLogs;\n};\n","import React from \"react\";\nimport LogsComponentContainer from \"../components/logs/LogsComponentContainer\";\n\nexport default function LogsScreen() {\n\n    return <LogsComponentContainer/>\n}\n","import React from \"react\";\n\nexport default function ErrorsScreen() {\n\n    return (<div>\n        Errors Screen\n    </div>)\n}\n","import React from \"react\";\n\nexport default function ErrorsScreen() {\n\n    return (<div>\n        Settings Screen\n    </div>)\n}\n","import React from \"react\";\n\nexport default function AdminScreen() {\n\n    return (<div>\n        Admin Screen\n    </div>)\n}\n","import React from \"react\";\nimport {\n    Switch,\n    Route,\n} from \"react-router-dom\";\n\nimport useMainStyle from \"../styles/MainStyles\";\nimport MetricsScreen from \"../screens/MetricsScreen\";\nimport LogsScreen from \"../screens/LogsScreen\";\nimport ErrorsScreen from \"../screens/ErrorsScreen\";\nimport SettingsScreen from \"../screens/SettingsScreen\";\nimport AdminScreen from \"../screens/AdminScreen\";\n\nexport default function MainNavigation() {\n    const classes = useMainStyle();\n\n    return (\n        <main className={classes.content}>\n            <div className={classes.toolbar}/>\n                <Switch>\n                    <Route path=\"/metrics\">\n                        <MetricsScreen/>\n                    </Route>\n                    <Route path=\"/logs\">\n                        <LogsScreen/>\n                    </Route>\n                    <Route path=\"/errors\">\n                        <ErrorsScreen/>\n                    </Route>\n                    <Route path=\"/settings\">\n                        <SettingsScreen/>\n                    </Route>\n                    <Route path=\"/admin\">\n                        <AdminScreen/>\n                    </Route>\n                </Switch>\n        </main>)\n\n}\n","import React, {useState} from 'react';\nimport TopBar from \"./components/TopBar\";\nimport SideBar from \"./components/SideBar\";\nimport {BrowserRouter as Router} from \"react-router-dom\";\nimport MainNavigation from \"./routes/MainNavigation\";\nimport useMainStyle from \"./styles/MainStyles\";\nimport CssBaseline from \"@material-ui/core/CssBaseline\";\n\nfunction App() {\n\n    const [isMobileDrawerOpen, setIsMobileDrawerOpen] = useState(false);\n\n    const classes = useMainStyle();\n\n    const handleDrawerButton = () => {\n        setIsMobileDrawerOpen(!isMobileDrawerOpen);\n    };\n\n\n    return (\n        <div className={classes.root}>\n            <CssBaseline />\n            <TopBar onDrawerToggle={handleDrawerButton}\n                    isDrawerOpen={isMobileDrawerOpen}\n\n            />\n\n            <Router basename={process.env.PUBLIC_URL}>\n                <SideBar isMobileDrawerOpen={isMobileDrawerOpen}\n                         onMobileDrawerClose={() => {setIsMobileDrawerOpen(false)}}\n                />\n\n                <MainNavigation/>\n\n\n            </Router>\n        </div>\n    );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}