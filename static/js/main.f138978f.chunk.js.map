{"version":3,"sources":["styles/MainStyles.js","components/top-bar/TopBar.jsx","components/side-bar/SideBar.jsx","screens/MetricsScreen.jsx","screens/LogsScreen.jsx","screens/ErrorsScreen.jsx","screens/SettingsScreen.jsx","screens/AdminScreen.jsx","routes/MainNavigation.jsx","App.jsx","serviceWorker.js","index.js"],"names":["useMainStyle","makeStyles","theme","root","display","appBar","zIndex","drawer","width","flexShrink","drawerPaper","content","flexGrow","padding","spacing","toolbar","mixins","TopBar","props","classes","AppBar","position","className","Toolbar","Typography","variant","noWrap","ListItemLink","icon","name","to","renderLink","React","useMemo","forwardRef","itemProps","ref","ListItem","button","component","ListItemIcon","ListItemText","primary","SideBar","menuItems","Speed","History","BugReport","Settings","SupervisorAccount","Drawer","paper","List","map","item","index","Divider","key","ExitToApp","MetricsScreen","LogsScreen","ErrorsScreen","AdminScreen","MainNavigation","path","App","useState","isDrawerOpen","setIsDrawerOpen","CssBaseline","onDrawerButton","onDrawerCloseButton","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.f138978f.chunk.js","sourcesContent":["import {makeStyles} from \"@material-ui/core/styles\";\n\nconst drawerWidth = 240;\n\nconst useMainStyle = makeStyles(theme => ({\n    root: {\n        display: 'flex',\n    },\n    appBar: {\n        zIndex: theme.zIndex.drawer + 1,\n    },\n    drawer: {\n        width: drawerWidth,\n        flexShrink: 0,\n    },\n    drawerPaper: {\n        width: drawerWidth,\n    },\n    content: {\n        flexGrow: 1,\n        padding: theme.spacing(3),\n    },\n    toolbar: theme.mixins.toolbar,\n}));\n\nexport default useMainStyle;\n","import React from 'react';\n\nimport AppBar from '@material-ui/core/AppBar';\nimport Toolbar from '@material-ui/core/Toolbar';\nimport Typography from '@material-ui/core/Typography';\nimport useMainStyle from \"../../styles/MainStyles\";\n\nexport default function TopBar(props) {\n    const classes = useMainStyle();\n\n    return (\n        <AppBar position=\"fixed\" className={classes.appBar}>\n            <Toolbar>\n                <Typography variant=\"h6\" noWrap>\n                    Logs Panda\n                </Typography>\n            </Toolbar>\n        </AppBar>\n    );\n}\n\n\n\n","import React from 'react';\n\nimport Drawer from \"@material-ui/core/Drawer\";\nimport ListItemIcon from \"@material-ui/core/ListItemIcon\";\nimport Divider from \"@material-ui/core/Divider\";\nimport List from \"@material-ui/core/List\";\nimport ListItem from \"@material-ui/core/ListItem\";\nimport ListItemText from \"@material-ui/core/ListItemText\";\n\nimport useMainStyle from \"../../styles/MainStyles\";\nimport {BugReport, History, Settings, Speed, SupervisorAccount, ExitToApp} from \"@material-ui/icons\";\nimport {Link} from \"react-router-dom\";\n\n\nfunction ListItemLink(props) {\n    const {icon, name, to} = props;\n\n    const renderLink = React.useMemo(\n        () =>\n            React.forwardRef((itemProps, ref) => (\n                <Link to={to} {...itemProps} ref={ref}/>\n            )),\n        [to],\n    );\n\n    return (\n        <li>\n            <ListItem button component={renderLink}>\n                {icon ? <ListItemIcon>{icon}</ListItemIcon> : null}\n                <ListItemText primary={name}/>\n            </ListItem>\n        </li>\n    );\n}\n\nexport default function SideBar(props) {\n    const classes = useMainStyle();\n\n\n    const menuItems = [\n        {\n            \"name\": \"Metrics\",\n            \"icon\": <Speed/>,\n            \"to\": \"/metrics\"\n        },\n        {\n            \"name\": \"Logs\",\n            \"icon\": <History/>,\n            \"to\": \"/logs\"\n        },\n        {\n            \"name\": \"Error Reports\",\n            \"icon\": <BugReport/>,\n            \"to\": \"/errors\"\n        },\n        {\n            \"name\": \"Settings\",\n            \"icon\": <Settings/>,\n            \"to\": \"/settings\"\n        },\n        {\n            \"name\": \"Administration\",\n            \"icon\": <SupervisorAccount/>,\n            \"to\": \"/admin\"\n        },\n    ];\n\n    return (\n        <Drawer\n            className={classes.drawer}\n            variant=\"permanent\"\n            classes={{\n                paper: classes.drawerPaper,\n            }}\n        >\n            <div className={classes.toolbar}/>\n            <List>\n                {\n                    menuItems.map((item, index) => <ListItemLink {...item}/>)\n                }\n            </List>\n            <Divider/>\n\n            <ListItem button key={'Sign Out'}>\n                <ListItemIcon><ExitToApp/></ListItemIcon>\n                <ListItemText primary={'Sign Out'}/>\n            </ListItem>\n\n        </Drawer>\n    );\n}\n","import React from \"react\";\n\nexport default function MetricsScreen() {\n\n    return (<div>\n        Metrics Screen\n    </div>)\n}\n","import React from \"react\";\n\nexport default function LogsScreen() {\n\n    return (<div>\n        Logs Screen\n    </div>)\n}\n","import React from \"react\";\n\nexport default function ErrorsScreen() {\n\n    return (<div>\n        Errors Screen\n    </div>)\n}\n","import React from \"react\";\n\nexport default function ErrorsScreen() {\n\n    return (<div>\n        Settings Screen\n    </div>)\n}\n","import React from \"react\";\n\nexport default function AdminScreen() {\n\n    return (<div>\n        Admin Screen\n    </div>)\n}\n","import React from \"react\";\nimport {\n    Switch,\n    Route,\n} from \"react-router-dom\";\n\nimport useMainStyle from \"../styles/MainStyles\";\nimport MetricsScreen from \"../screens/MetricsScreen\";\nimport LogsScreen from \"../screens/LogsScreen\";\nimport ErrorsScreen from \"../screens/ErrorsScreen\";\nimport SettingsScreen from \"../screens/SettingsScreen\";\nimport AdminScreen from \"../screens/AdminScreen\";\n\nexport default function MainNavigation() {\n    const classes = useMainStyle();\n\n    return (\n        <main className={classes.content}>\n            <div className={classes.toolbar}/>\n                <Switch>\n                    <Route path=\"/metrics\">\n                        <MetricsScreen/>\n                    </Route>\n                    <Route path=\"/logs\">\n                        <LogsScreen/>\n                    </Route>\n                    <Route path=\"/errors\">\n                        <ErrorsScreen/>\n                    </Route>\n                    <Route path=\"/settings\">\n                        <SettingsScreen/>\n                    </Route>\n                    <Route path=\"/admin\">\n                        <AdminScreen/>\n                    </Route>\n                </Switch>\n        </main>)\n\n}\n","import React from 'react';\nimport TopBar from \"./components/top-bar/TopBar\";\nimport SideBar from \"./components/side-bar/SideBar\";\nimport {BrowserRouter as Router} from \"react-router-dom\";\nimport MainNavigation from \"./routes/MainNavigation\";\nimport useMainStyle from \"./styles/MainStyles\";\nimport clsx from \"clsx\";\nimport CssBaseline from \"@material-ui/core/CssBaseline\";\n\nfunction App() {\n\n    const [isDrawerOpen, setIsDrawerOpen] = React.useState(false);\n    const classes = useMainStyle();\n\n    const handleDrawerButton = () => {\n        setIsDrawerOpen(!isDrawerOpen);\n    };\n\n    const handleDrawerClose = () => {\n        setIsDrawerOpen(false);\n    };\n\n\n    return (\n        <div className={classes.root}>\n            <CssBaseline />\n            <TopBar onDrawerButton={handleDrawerButton}\n                    isDrawerOpen={isDrawerOpen}\n\n            />\n\n            <Router>\n                <SideBar isDrawerOpen={isDrawerOpen}\n                         onDrawerCloseButton={handleDrawerClose}\n                />\n\n                <MainNavigation/>\n\n\n            </Router>\n        </div>\n    );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}