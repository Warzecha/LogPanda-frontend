{"version":3,"sources":["styles/MainStyles.js","components/TopBar.jsx","components/SideBar.jsx","utils/numberUtils.js","styles/TileStyles.js","components/metrics/UptimeComponent.jsx","components/metrics/ThroughputComponent.jsx","components/metrics/MetricsComponentView.jsx","components/metrics/MetricsComponentContainer.jsx","screens/MetricsScreen.jsx","screens/LogsScreen.jsx","screens/ErrorsScreen.jsx","screens/SettingsScreen.jsx","screens/AdminScreen.jsx","routes/MainNavigation.jsx","App.jsx","serviceWorker.js","index.js"],"names":["useMainStyle","makeStyles","theme","root","display","appBar","zIndex","drawer","menuButton","marginRight","spacing","breakpoints","up","width","flexShrink","drawerPaper","content","flexGrow","padding","toolbar","mixins","TopBar","props","classes","isSmallDevice","useMediaQuery","AppBar","position","className","Toolbar","IconButton","color","aria-label","edge","onClick","onDrawerToggle","Typography","variant","noWrap","ListItemLink","icon","name","to","renderLink","React","useMemo","forwardRef","itemProps","ref","ListItem","button","component","onItemClicked","ListItemIcon","ListItemText","primary","SideBar","drawerContent","List","menuItems","map","item","index","key","onMobileDrawerClose","Divider","ExitToApp","Drawer","onClose","open","isMobileDrawerOpen","paper","ModalProps","keepMounted","Speed","History","BugReport","Settings","SupervisorAccount","round","value","decimalPlaces","parseFloat","toFixed","useTileStyle","card","minWidth","margin","cardTitle","fontSize","sectionTitle","marginTop","row","flexDirection","appendix","marginLeft","UptimeComponent","uptime","errorRate","serverErrors","roundUptime","roundErrorRate","roundServerErrors","last24h","calculateTimePeriodInLast24hr","Card","CardContent","gutterBottom","CardActions","Button","size","totalSeconds","hours","Math","floor","minutes","seconds","formatTime","ThroughputComponent","currentValue","relativeCapacity","formatThroughput","MetricsComponentView","throughputMetrics","MetricsComponentContainer","useState","defaultThroughputMetrics","MetricsScreen","LogsScreen","ErrorsScreen","AdminScreen","MainNavigation","path","App","setIsMobileDrawerOpen","CssBaseline","isDrawerOpen","basename","process","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"6RAiCeA,EA7BMC,aAAW,SAAAC,GAAK,MAAK,CACtCC,KAAM,CACFC,QAAS,QAEbC,OAAQ,CACJC,OAAQJ,EAAMI,OAAOC,OAAS,GAElCC,WAAW,aACPC,YAAaP,EAAMQ,QAAQ,IAC1BR,EAAMS,YAAYC,GAAG,MAAQ,CAC1BR,QAAS,SAKjBG,OAAQ,CACJM,MAlBY,IAmBZC,WAAY,GAEhBC,YAAa,CACTF,MAtBY,KAwBhBG,QAAS,CACLC,SAAU,EACVC,QAAShB,EAAMQ,QAAQ,IAE3BS,QAASjB,EAAMkB,OAAOD,Y,mCCpBX,SAASE,EAAOC,GAC3B,IAAMC,EAAUvB,IACVwB,EAAgBC,YAAc,qBAEpC,OACI,kBAACC,EAAA,EAAD,CAAQC,SAAS,QAAQC,UAAWL,EAAQlB,QACxC,kBAACwB,EAAA,EAAD,KACKL,GAAiB,kBAACM,EAAA,EAAD,CACdC,MAAM,UACNC,aAAW,cACXC,KAAK,QACLC,QAASZ,EAAMa,eACfP,UAAWL,EAAQf,YAEnB,kBAAC,IAAD,OAEJ,kBAAC4B,EAAA,EAAD,CAAYC,QAAQ,KAAKC,QAAM,GAA/B,gB,wHCXhB,SAASC,EAAajB,GAAQ,IACnBkB,EAAkBlB,EAAlBkB,KAAMC,EAAYnB,EAAZmB,KAAMC,EAAMpB,EAANoB,GACbC,EAAaC,IAAMC,SACrB,kBACID,IAAME,YAAW,SAACC,EAAWC,GAAZ,OACb,kBAAC,IAAD,eAAMN,GAAIA,GAAQK,EAAlB,CAA6BC,IAAKA,UAE1C,CAACN,IAGL,OACI,4BACI,kBAACO,EAAA,EAAD,CAAUC,QAAM,EAACC,UAAWR,EAAYT,QAASZ,EAAM8B,eAClDZ,EAAO,kBAACa,EAAA,EAAD,KAAeb,GAAuB,KAC9C,kBAACc,EAAA,EAAD,CAAcC,QAASd,MAMxB,SAASe,EAAQlC,GAC5B,IAAMC,EAAUvB,IACVwB,EAAgBC,YAAc,qBAE9BgC,EACF,6BACI,kBAACC,EAAA,EAAD,KAEQC,EAAUC,KAAI,SAACC,EAAMC,GACjB,OAAO,kBAACvB,EAAD,iBAAkBsB,EAAlB,CACcE,IAAKD,EACLV,cAAe9B,EAAM0C,2BAKtD,kBAACC,EAAA,EAAD,MAEA,kBAAChB,EAAA,EAAD,CAAUC,QAAM,EAACa,IAAK,YAClB,kBAACV,EAAA,EAAD,KAAc,kBAACa,EAAA,EAAD,OACd,kBAACZ,EAAA,EAAD,CAAcC,QAAS,eAKnC,OAAI/B,EAEI,kBAAC2C,EAAA,EAAD,CAEI9B,QAAQ,YAER+B,QAAS9C,EAAM0C,oBACfK,KAAM/C,EAAMgD,mBACZ/C,QAAS,CACLgD,MAAOhD,EAAQR,aAEnByD,WAAY,CACRC,aAAa,IAGhBhB,GAKL,kBAACU,EAAA,EAAD,CACIvC,UAAWL,EAAQhB,OACnB8B,QAAQ,YACRd,QAAS,CACLgD,MAAOhD,EAAQR,cAGnB,yBAAKa,UAAWL,EAAQJ,UACvBsC,GAQjB,IAAME,EAAY,CACd,CACI,KAAQ,UACR,KAAQ,kBAACe,EAAA,EAAD,MACR,GAAM,YAEV,CACI,KAAQ,OACR,KAAQ,kBAACC,EAAA,EAAD,MACR,GAAM,SAEV,CACI,KAAQ,gBACR,KAAQ,kBAACC,EAAA,EAAD,MACR,GAAM,WAEV,CACI,KAAQ,WACR,KAAQ,kBAACC,EAAA,EAAD,MACR,GAAM,aAEV,CACI,KAAQ,iBACR,KAAQ,kBAACC,EAAA,EAAD,MACR,GAAM,W,4CCtHP,SAASC,EAAMC,GAA0B,IAAnBC,EAAkB,uDAAH,EACxC,OAAOC,WAAWF,GAAOG,QAAQF,GCDrC,IAqBeG,EArBMnF,YAAW,CAC5BoF,KAAM,CACFC,SAAU,IACVC,OAAQ,IAEZC,UAAW,CACPC,SAAU,IAEdC,aAAc,CACVC,UAAW,IAEfC,IAAK,CACDxF,QAAS,OACTyF,cAAe,OAEnBC,SAAU,CACNC,WAAY,MCPL,SAASC,EAAgB1E,GACpC,IAAMC,EAAU6D,IAETa,EAAmC3E,EAAnC2E,OAAQC,EAA2B5E,EAA3B4E,UAAWC,EAAgB7E,EAAhB6E,aACpBC,EAAcrB,EAAMkB,EAAQ,GAC5BI,EAAiBtB,EAAMmB,EAAW,GAClCI,EAAoBvB,EAAMoB,EAAc,GAExCI,EAAUC,EAA8BP,GAE9C,OACI,kBAACQ,EAAA,EAAD,CAAM7E,UAAWL,EAAQ8D,MACrB,kBAACqB,EAAA,EAAD,KACI,kBAACtE,EAAA,EAAD,CAAYR,UAAWL,EAAQiE,UAAWzD,MAAM,gBAAgB4E,cAAY,GAA5E,UAGA,kBAACvE,EAAA,EAAD,CAAYC,QAAQ,KAAKc,UAAU,MAC9BiD,EADL,KAKA,kBAAChE,EAAA,EAAD,CAAYL,MAAM,iBACbwE,EADL,oBAKA,kBAACnE,EAAA,EAAD,CAAYR,UAAWL,EAAQmE,aAAc3D,MAAM,iBAAnD,cAGA,kBAACK,EAAA,EAAD,CAAYC,QAAQ,KAAKc,UAAU,MAC9BkD,EADL,KAMA,kBAACjE,EAAA,EAAD,CAAYR,UAAWL,EAAQmE,aAAc3D,MAAM,iBAAnD,YAGA,kBAACK,EAAA,EAAD,CAAYC,QAAQ,KAAKc,UAAU,MAC9BmD,EADL,KAGA,kBAAClE,EAAA,EAAD,CAAYL,MAAM,iBAAlB,4BAKJ,kBAAC6E,EAAA,EAAD,KACI,kBAACC,EAAA,EAAD,CAAQC,KAAK,SAAb,gBAMhB,IAAMN,EAAgC,SAACP,GACnC,IAAIc,EAAe,OAAgB,IAAMd,GAAU,IAE/Ce,EAAUC,KAAKC,MAAMH,EAAe,MACpCI,EAAUF,KAAKC,OAAOH,EAAwB,KAARC,GAAiB,IACvDI,EAAUrC,EAAMgC,EAAwB,KAARC,EAA2B,GAAVG,EAAe,GAMpE,OAJAH,EAAQK,EAAWL,EAAO,MAIX,KAHfG,EAAUE,EAAWF,EAAS,QAGC,KAF/BC,EAAUC,EAAWD,EAAS,OAK5BC,EAAa,SAACrC,EAAOc,GAAR,OAAuBd,EAAiBA,EAAQc,EAAhB,IClEpC,SAASwB,EAAoBhG,GACxC,IAAMC,EAAU6D,IACTmC,EAAkCjG,EAAlCiG,aAAcC,EAAoBlG,EAApBkG,iBAErB,OACI,kBAACf,EAAA,EAAD,CAAM7E,UAAWL,EAAQ8D,MACrB,kBAACqB,EAAA,EAAD,KACI,kBAACtE,EAAA,EAAD,CAAYR,UAAWL,EAAQiE,UAAWzD,MAAM,gBAAgB4E,cAAY,GAA5E,sBAIA,yBAAK/E,UAAWL,EAAQqE,KACpB,kBAACxD,EAAA,EAAD,CAAYC,QAAQ,KAAKc,UAAU,MAC9BsE,EAAiBF,IAEtB,kBAACnF,EAAA,EAAD,CAAYC,QAAQ,KAAKc,UAAU,KAAKvB,UAAWL,EAAQuE,SAAU/D,MAAM,iBACtE,QAIT,kBAACK,EAAA,EAAD,CAAYR,UAAWL,EAAQmE,aAAc3D,MAAM,iBAAnD,YAIA,yBAAKH,UAAWL,EAAQqE,KACpB,kBAACxD,EAAA,EAAD,CAAYC,QAAQ,KAAKc,UAAU,MAC9B4B,EAAMyC,EAAkB,GAD7B,KAGA,kBAACpF,EAAA,EAAD,CAAYC,QAAQ,KAAKc,UAAU,KAAKvB,UAAWL,EAAQuE,SAAU/D,MAAM,iBACtE,cAKb,kBAAC6E,EAAA,EAAD,KACI,kBAACC,EAAA,EAAD,CAAQC,KAAK,SAAb,gBAQhB,IAAMW,EAAmB,SAACzC,GACtB,OAAIA,EAAQ,IACDA,EACDA,EAAQ,IAEPD,EADWC,EAAQ,IACF,GAAK,IACvBA,EAAQ,IAEPD,EADWC,EAAQ,IACF,GAAK,IAGtBD,EADUC,EAAQ,IACF,GAAK,KC9DrB,SAAS0C,EAAqBpG,GAEzC,OACI,6BACI,kBAAC0E,EAAoB1E,GACrB,kBAACgG,EAAwBhG,EAAMqG,oBCN5B,SAASC,IAA6B,IAAD,EAEpBC,mBAAS,OAFW,mBAEzC5B,EAFyC,aAGd4B,mBAAS,MAHK,mBAGzC3B,EAHyC,aAIR2B,mBAAS,OAJD,mBAIzC1B,EAJyC,aAKE0B,mBAASC,IALX,mBAKzCH,EALyC,UAOhD,OACI,kBAACD,EAAD,CAAsBzB,OAAQA,EACRC,UAAWA,EACXC,aAAcA,EACdwB,kBAAmBA,IAMjD,IAAMG,EAA2B,CAC7BP,aAAc,OACdC,iBAAkB,MCnBP,SAASO,IAEpB,OAAQ,kBAACH,EAAD,MCHG,SAASI,IAEpB,OAAQ,4CCFG,SAASC,IAEpB,OAAQ,8CCFG,SAASA,IAEpB,OAAQ,gDCFG,SAASC,KAEpB,OAAQ,6CCSG,SAASC,KACpB,IAAM5G,EAAUvB,IAEhB,OACI,0BAAM4B,UAAWL,EAAQP,SACrB,yBAAKY,UAAWL,EAAQJ,UACpB,kBAAC,IAAD,KACI,kBAAC,IAAD,CAAOiH,KAAK,YACR,kBAACL,EAAD,OAEJ,kBAAC,IAAD,CAAOK,KAAK,SACR,kBAACJ,EAAD,OAEJ,kBAAC,IAAD,CAAOI,KAAK,WACR,kBAACH,EAAD,OAEJ,kBAAC,IAAD,CAAOG,KAAK,aACR,kBAAC,EAAD,OAEJ,kBAAC,IAAD,CAAOA,KAAK,UACR,kBAACF,GAAD,S,cCOTG,OAhCf,WAAgB,IAAD,EAEyCR,oBAAS,GAFlD,mBAEJvD,EAFI,KAEgBgE,EAFhB,KAIL/G,EAAUvB,IAOhB,OACI,yBAAK4B,UAAWL,EAAQpB,MACpB,kBAACoI,GAAA,EAAD,MACA,kBAAClH,EAAD,CAAQc,eARW,WACvBmG,GAAuBhE,IAQXkE,aAAclE,IAItB,kBAAC,IAAD,CAAQmE,SAAUC,uBACd,kBAAClF,EAAD,CAASc,mBAAoBA,EACpBN,oBAAqB,WAAOsE,GAAsB,MAG3D,kBAACH,GAAD,SCpBIQ,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,GAAD,MAASC,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.3a56b3b1.chunk.js","sourcesContent":["import {makeStyles} from \"@material-ui/core/styles\";\n\nconst drawerWidth = 240;\n\nconst useMainStyle = makeStyles(theme => ({\n    root: {\n        display: 'flex',\n    },\n    appBar: {\n        zIndex: theme.zIndex.drawer + 1,\n    },\n    menuButton: {\n        marginRight: theme.spacing(2),\n        [theme.breakpoints.up('sm')]: {\n            display: 'none',\n        },\n    },\n\n\n    drawer: {\n        width: drawerWidth,\n        flexShrink: 0,\n    },\n    drawerPaper: {\n        width: drawerWidth,\n    },\n    content: {\n        flexGrow: 1,\n        padding: theme.spacing(3),\n    },\n    toolbar: theme.mixins.toolbar,\n}));\n\nexport default useMainStyle;\n","import React from 'react';\n\nimport AppBar from '@material-ui/core/AppBar';\nimport Toolbar from '@material-ui/core/Toolbar';\nimport Typography from '@material-ui/core/Typography';\nimport useMainStyle from \"../styles/MainStyles\";\nimport IconButton from \"@material-ui/core/IconButton\";\nimport MenuIcon from '@material-ui/icons/Menu';\nimport {useMediaQuery} from \"@material-ui/core\";\n\nexport default function TopBar(props) {\n    const classes = useMainStyle();\n    const isSmallDevice = useMediaQuery('(max-width:600px)');\n\n    return (\n        <AppBar position=\"fixed\" className={classes.appBar}>\n            <Toolbar>\n                {isSmallDevice && <IconButton\n                    color=\"inherit\"\n                    aria-label=\"open drawer\"\n                    edge=\"start\"\n                    onClick={props.onDrawerToggle}\n                    className={classes.menuButton}\n                >\n                    <MenuIcon />\n                </IconButton>}\n                <Typography variant=\"h6\" noWrap>\n                    Logs Panda\n                </Typography>\n            </Toolbar>\n        </AppBar>\n    );\n}\n\n\n\n","import React, {useState} from 'react';\n\nimport Drawer from \"@material-ui/core/Drawer\";\nimport ListItemIcon from \"@material-ui/core/ListItemIcon\";\nimport Divider from \"@material-ui/core/Divider\";\nimport List from \"@material-ui/core/List\";\nimport ListItem from \"@material-ui/core/ListItem\";\nimport ListItemText from \"@material-ui/core/ListItemText\";\n\nimport useMainStyle from \"../styles/MainStyles\";\nimport {BugReport, History, Settings, Speed, SupervisorAccount, ExitToApp} from \"@material-ui/icons\";\nimport {Link} from \"react-router-dom\";\nimport {useMediaQuery} from \"@material-ui/core\";\n\n\nfunction ListItemLink(props) {\n    const {icon, name, to} = props;\n    const renderLink = React.useMemo(\n        () =>\n            React.forwardRef((itemProps, ref) => (\n                <Link to={to} {...itemProps} ref={ref}/>\n            )),\n        [to],\n    );\n\n    return (\n        <li>\n            <ListItem button component={renderLink} onClick={props.onItemClicked}>\n                {icon ? <ListItemIcon>{icon}</ListItemIcon> : null}\n                <ListItemText primary={name}/>\n            </ListItem>\n        </li>\n    );\n}\n\nexport default function SideBar(props) {\n    const classes = useMainStyle();\n    const isSmallDevice = useMediaQuery('(max-width:600px)');\n\n    const drawerContent = (\n        <div>\n            <List>\n                {\n                    menuItems.map((item, index) => {\n                        return <ListItemLink {...item}\n                                             key={index}\n                                             onItemClicked={props.onMobileDrawerClose}\n                        />\n                    })\n                }\n            </List>\n            <Divider/>\n\n            <ListItem button key={'Sign Out'}>\n                <ListItemIcon><ExitToApp/></ListItemIcon>\n                <ListItemText primary={'Sign Out'}/>\n            </ListItem>\n        </div>\n    );\n\n    if (isSmallDevice) {\n        return (\n            <Drawer\n                // container={container}\n                variant=\"temporary\"\n                // anchor={theme.direction === 'rtl' ? 'right' : 'left'}\n                onClose={props.onMobileDrawerClose}\n                open={props.isMobileDrawerOpen}\n                classes={{\n                    paper: classes.drawerPaper,\n                }}\n                ModalProps={{\n                    keepMounted: true, // Better open performance on mobile.\n                }}\n            >\n                {drawerContent}\n            </Drawer>\n        )\n    } else {\n        return (\n            <Drawer\n                className={classes.drawer}\n                variant=\"permanent\"\n                classes={{\n                    paper: classes.drawerPaper,\n                }}\n            >\n                <div className={classes.toolbar}/>\n                {drawerContent}\n            </Drawer>\n        );\n    }\n\n}\n\n\nconst menuItems = [\n    {\n        \"name\": \"Metrics\",\n        \"icon\": <Speed/>,\n        \"to\": \"/metrics\"\n    },\n    {\n        \"name\": \"Logs\",\n        \"icon\": <History/>,\n        \"to\": \"/logs\"\n    },\n    {\n        \"name\": \"Error Reports\",\n        \"icon\": <BugReport/>,\n        \"to\": \"/errors\"\n    },\n    {\n        \"name\": \"Settings\",\n        \"icon\": <Settings/>,\n        \"to\": \"/settings\"\n    },\n    {\n        \"name\": \"Administration\",\n        \"icon\": <SupervisorAccount/>,\n        \"to\": \"/admin\"\n    },\n];\n","\n\nexport function round(value, decimalPlaces= 2) {\n    return parseFloat(value).toFixed(decimalPlaces);\n}\n","import {makeStyles} from \"@material-ui/core/styles\";\n\nconst useTileStyle = makeStyles({\n    card: {\n        minWidth: 275,\n        margin: 10\n    },\n    cardTitle: {\n        fontSize: 18,\n    },\n    sectionTitle: {\n        marginTop: 12,\n    },\n    row: {\n        display: 'flex',\n        flexDirection: 'row',\n    },\n    appendix: {\n        marginLeft: 10\n    }\n});\n\n\nexport default useTileStyle;\n","import React from \"react\";\nimport Card from \"@material-ui/core/Card\";\nimport CardActions from '@material-ui/core/CardActions';\nimport CardContent from '@material-ui/core/CardContent';\nimport Button from '@material-ui/core/Button';\nimport Typography from '@material-ui/core/Typography';\nimport {round} from \"../../utils/numberUtils\";\nimport useTileStyle from \"../../styles/TileStyles\";\n\n\n\nexport default function UptimeComponent(props) {\n    const classes = useTileStyle();\n\n    const {uptime, errorRate, serverErrors} = props;\n    const roundUptime = round(uptime, 2);\n    const roundErrorRate = round(errorRate, 2);\n    const roundServerErrors = round(serverErrors, 2);\n\n    const last24h = calculateTimePeriodInLast24hr(uptime);\n\n    return(\n        <Card className={classes.card}>\n            <CardContent>\n                <Typography className={classes.cardTitle} color=\"textSecondary\" gutterBottom>\n                    Uptime\n                </Typography>\n                <Typography variant=\"h5\" component=\"h2\">\n                    {roundUptime}%\n                </Typography>\n\n\n                <Typography color=\"textSecondary\">\n                    {last24h} during last 24h\n                </Typography>\n\n\n                <Typography className={classes.sectionTitle} color=\"textSecondary\">\n                    Error rate\n                </Typography>\n                <Typography variant=\"h5\" component=\"h2\">\n                    {roundErrorRate}%\n                </Typography>\n\n\n\n                <Typography className={classes.sectionTitle} color=\"textSecondary\">\n                    of which\n                </Typography>\n                <Typography variant=\"h5\" component=\"h2\">\n                    {roundServerErrors}%\n                </Typography>\n                <Typography color=\"textSecondary\">\n                    were server side errors\n                </Typography>\n\n            </CardContent>\n            <CardActions>\n                <Button size=\"small\">Learn More</Button>\n            </CardActions>\n        </Card>\n    )\n}\n\nconst calculateTimePeriodInLast24hr = (uptime) => {\n    let totalSeconds = 24 * 60 * 60 * (100 - uptime) / 100;\n\n    let hours   = Math.floor(totalSeconds / 3600);\n    let minutes = Math.floor((totalSeconds - (hours * 3600)) / 60);\n    let seconds = round(totalSeconds - (hours * 3600) - (minutes * 60), 0);\n\n    hours = formatTime(hours, 'h');\n    minutes = formatTime(minutes, 'min');\n    seconds = formatTime(seconds, 's');\n\n    return hours + ' ' + minutes + ' ' + seconds;\n};\n\nconst formatTime = (value, appendix) => ((value || '') && (value + appendix));\n\n","import React from \"react\";\nimport {makeStyles} from \"@material-ui/core/styles\";\nimport useTileStyle from \"../../styles/TileStyles\";\nimport Card from \"@material-ui/core/Card\";\nimport CardContent from \"@material-ui/core/CardContent\";\nimport Typography from \"@material-ui/core/Typography\";\nimport CardActions from \"@material-ui/core/CardActions\";\nimport Button from \"@material-ui/core/Button\";\nimport {round} from \"../../utils/numberUtils\";\n\n\n\nexport default function ThroughputComponent(props) {\n    const classes = useTileStyle();\n    const {currentValue, relativeCapacity} = props;\n\n    return(\n        <Card className={classes.card}>\n            <CardContent>\n                <Typography className={classes.cardTitle} color=\"textSecondary\" gutterBottom>\n                    Current throughput\n                </Typography>\n\n                <div className={classes.row}>\n                    <Typography variant=\"h5\" component=\"h2\">\n                        {formatThroughput(currentValue)}\n                    </Typography>\n                    <Typography variant=\"h5\" component=\"h2\" className={classes.appendix} color=\"textSecondary\">\n                        {\"RPM\"}\n                    </Typography>\n                </div>\n\n                <Typography className={classes.sectionTitle} color=\"textSecondary\">\n                    Relative\n                </Typography>\n\n                <div className={classes.row}>\n                    <Typography variant=\"h5\" component=\"h2\">\n                        {round(relativeCapacity, 1)}%\n                    </Typography>\n                    <Typography variant=\"h5\" component=\"h2\" className={classes.appendix} color=\"textSecondary\">\n                        {\"capacity\"}\n                    </Typography>\n                </div>\n\n            </CardContent>\n            <CardActions>\n                <Button size=\"small\">Learn More</Button>\n            </CardActions>\n        </Card>\n    )\n\n}\n\n\nconst formatThroughput = (value) => {\n    if (value < 5000) {\n        return value\n    } else if(value < 20000) {\n        const thousands = value / 1000;\n        return round(thousands, 2) + 'k'\n    } else if(value < 1000000) {\n        const thousands = value / 1000;\n        return round(thousands, 1) + 'k'\n    } else {\n        const millions = value / 1000000;\n        return round(millions, 3) + 'M'\n    }\n}\n","import React from \"react\";\nimport UptimeComponent from \"./UptimeComponent\";\nimport ThroughputComponent from \"./ThroughputComponent\";\n\nexport default function MetricsComponentView(props) {\n\n    return(\n        <div>\n            <UptimeComponent {...props}/>\n            <ThroughputComponent {...props.throughputMetrics}/>\n\n        </div>\n    )\n\n\n}\n","import React, {useState} from \"react\";\nimport MetricsComponentView from \"./MetricsComponentView\";\n\nexport default function MetricsComponentContainer() {\n\n    const [uptime, setUptime] = useState(98.97);\n    const [errorRate, setErrorRate] = useState(0.12);\n    const [serverErrors, setServerErrors] = useState(30.2);\n    const [throughputMetrics, setThroughputMetrics] = useState(defaultThroughputMetrics);\n\n    return (\n        <MetricsComponentView uptime={uptime}\n                              errorRate={errorRate}\n                              serverErrors={serverErrors}\n                              throughputMetrics={throughputMetrics}\n        />\n    )\n\n}\n\nconst defaultThroughputMetrics = {\n    currentValue: 175945,\n    relativeCapacity: 47.7\n};\n","import React from \"react\";\nimport MetricsComponentContainer from '../components/metrics/MetricsComponentContainer'\n\nexport default function MetricsScreen() {\n\n    return (<MetricsComponentContainer/>)\n}\n","import React from \"react\";\n\nexport default function LogsScreen() {\n\n    return (<div>\n        Logs Screen\n    </div>)\n}\n","import React from \"react\";\n\nexport default function ErrorsScreen() {\n\n    return (<div>\n        Errors Screen\n    </div>)\n}\n","import React from \"react\";\n\nexport default function ErrorsScreen() {\n\n    return (<div>\n        Settings Screen\n    </div>)\n}\n","import React from \"react\";\n\nexport default function AdminScreen() {\n\n    return (<div>\n        Admin Screen\n    </div>)\n}\n","import React from \"react\";\nimport {\n    Switch,\n    Route,\n} from \"react-router-dom\";\n\nimport useMainStyle from \"../styles/MainStyles\";\nimport MetricsScreen from \"../screens/MetricsScreen\";\nimport LogsScreen from \"../screens/LogsScreen\";\nimport ErrorsScreen from \"../screens/ErrorsScreen\";\nimport SettingsScreen from \"../screens/SettingsScreen\";\nimport AdminScreen from \"../screens/AdminScreen\";\n\nexport default function MainNavigation() {\n    const classes = useMainStyle();\n\n    return (\n        <main className={classes.content}>\n            <div className={classes.toolbar}/>\n                <Switch>\n                    <Route path=\"/metrics\">\n                        <MetricsScreen/>\n                    </Route>\n                    <Route path=\"/logs\">\n                        <LogsScreen/>\n                    </Route>\n                    <Route path=\"/errors\">\n                        <ErrorsScreen/>\n                    </Route>\n                    <Route path=\"/settings\">\n                        <SettingsScreen/>\n                    </Route>\n                    <Route path=\"/admin\">\n                        <AdminScreen/>\n                    </Route>\n                </Switch>\n        </main>)\n\n}\n","import React, {useState} from 'react';\nimport TopBar from \"./components/TopBar\";\nimport SideBar from \"./components/SideBar\";\nimport {BrowserRouter as Router} from \"react-router-dom\";\nimport MainNavigation from \"./routes/MainNavigation\";\nimport useMainStyle from \"./styles/MainStyles\";\nimport CssBaseline from \"@material-ui/core/CssBaseline\";\n\nfunction App() {\n\n    const [isMobileDrawerOpen, setIsMobileDrawerOpen] = useState(false);\n\n    const classes = useMainStyle();\n\n    const handleDrawerButton = () => {\n        setIsMobileDrawerOpen(!isMobileDrawerOpen);\n    };\n\n\n    return (\n        <div className={classes.root}>\n            <CssBaseline />\n            <TopBar onDrawerToggle={handleDrawerButton}\n                    isDrawerOpen={isMobileDrawerOpen}\n\n            />\n\n            <Router basename={process.env.PUBLIC_URL}>\n                <SideBar isMobileDrawerOpen={isMobileDrawerOpen}\n                         onMobileDrawerClose={() => {setIsMobileDrawerOpen(false)}}\n                />\n\n                <MainNavigation/>\n\n\n            </Router>\n        </div>\n    );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}